<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Diphap.JsNetBridge</name>
    </assembly>
    <members>
        <member name="P:Diphap.JsNetBridge.Common.AssemblyInfo.ProductTitle">
            <summary>
            Gets the title property
            </summary>
        </member>
        <member name="P:Diphap.JsNetBridge.Common.AssemblyInfo.Version">
            <summary>
            Gets the application's version
            </summary>
        </member>
        <member name="P:Diphap.JsNetBridge.Common.AssemblyInfo.Description">
            <summary>
            Gets the description about the application.
            </summary>
        </member>
        <member name="P:Diphap.JsNetBridge.Common.AssemblyInfo.Product">
            <summary>
             Gets the product's full name.
            </summary>
        </member>
        <member name="P:Diphap.JsNetBridge.Common.AssemblyInfo.Copyright">
            <summary>
            Gets the copyright information for the product.
            </summary>
        </member>
        <member name="P:Diphap.JsNetBridge.Common.AssemblyInfo.Company">
            <summary>
            Gets the company information for the product.
            </summary>
        </member>
        <member name="M:Diphap.JsNetBridge.JSHelper.GetObjectFactoryName(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Get name of object factory.
            </summary>
            <param name="telem_work"></param>
            <param name="isCollection"></param>
            <param name="functionReference"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.JSHelper.CreateNamespace(System.String)">
            <summary>
            Create namespace.
            </summary>
            <param name="js_obj_fullName"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.JSHelper.GetPrimitiveEmptyValue(System.Type,System.String@)">
            <summary>
            Primitive Type of member or Collection of primitive types .
            </summary>
            <param name="tmember"></param>
            <param name="jsValue"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.JSHelper.GetFunction(System.String,System.Boolean,System.String)">
            <summary>
            Get Function.
            </summary>
            <param name="body"></param>
            <param name="call"></param>
            <param name="funcName"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.JSHelper.GetFactory(System.String,System.Boolean,System.String)">
            <summary>
            Get Factory:  function(){ return {param1:obj1, param2:2, param3:"" }; }
            </summary>
            <param name="jsObj">JS object.</param>
            <param name="constructorName">function name.</param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.JSHelper.GetFactory_Executing(System.String)">
            <summary>
            (function(){ return {param1:obj1, param2:2, param3:"" }; })();
            </summary>
            <param name="instructions"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.JSHelper.GetFactoryDeclaration(System.Type,System.String,System.Boolean)">
            <summary>
            $dp.namespace = $dp.namespace || function(){ return {param1:obj1, param2:2, param3:"" }; };
            </summary>
            <param name="t"></param>
            <param name="jsObj"></param>
            <param name="withArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.JSHelper.GetObjectFullName(System.Type)">
            <summary>
            full name of object.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.JSHelper.GetObjectDeclaration(System.Type,System.String)">
            <summary>
            $dp.namespace = $dp.namespace ||  {param1:obj1, param2:2, param3:"" };
            </summary>
            <param name="t"></param>
            <param name="jsObj"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.JSHelper.GetObjectDeclaration(System.String,System.String)">
            <summary>
            $dp.namespace = $dp.namespace ||  {param1:obj1, param2:2, param3:"" };
            </summary>
            <param name="objectFullName"></param>
            <param name="jsObj"></param>
            <returns></returns>
        </member>
        <member name="T:Diphap.JsNetBridge.Common.JS.JSCircularReferenceManagerFactoryHelper">
            <summary>
            Factory gives un new instance of Function that handles the circular reference objects.
            </summary>
        </member>
        <member name="F:Diphap.JsNetBridge.Common.JS.JSCircularReferenceManagerFactoryHelper.FunctionName">
            <summary>
            Name of factory.
            </summary>
        </member>
        <member name="M:Diphap.JsNetBridge.Common.JS.JSCircularReferenceManagerFactoryHelper.FunctionDefinitionCall(System.Type,System.Boolean)">
            <summary>
             ex: $dp.shared.circularReferenceManagerFactory.apply(null, args)(objectFactory)
             or ex: $dp.shared.JSArrayFactory($dp.shared.circularReferenceManagerFactory.apply(null, args)(objectFactory))
            </summary>
            <param name="telem_work"></param>
            <param name="isCollection"></param>
            <param name="functionReference"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.Common.JS.JSCircularReferenceManagerFactoryHelper.Implementation">
            <summary>
            [it's not necessary]Factory gives un new instance of Function that handles the circular reference objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.Common.JS.TypeSorter.Execute">
            <summary>
            Executes.
            </summary>
        </member>
        <member name="M:Diphap.JsNetBridge.Common.JS.TypeSorter.GetJsKeyValue_FactoryCall(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            ex: 'Course:$dp.$JsNet.MvcApplicationExample.Models.Course'. 'Course' is name of property.
            </summary>
            <param name="mi"></param>
            <param name="telem_work"></param>
            <param name="isCollection"></param>
            <param name="functionReference">For example: This '$dp.$JsNet.MvcApplicationExample.Models.Course' or '$dp.$JsNet.MvcApplicationExample.Models.Course()'</param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.Common.JS.TypeSorter.ResolveComplexMember(System.Reflection.MemberInfo,System.String)">
            <summary>
            Force.
            </summary>
            <param name="mi"></param>
            <param name="jsvalue">force value</param>
        </member>
        <member name="P:Diphap.JsNetBridge.Common.JS.TypeSorter.TComplexMembers">
            <summary>
            Get element type of collection if 't' is collection other else return 't'. 
            </summary>
        </member>
        <member name="T:Diphap.JsNetBridge.SerializeEnum">
            <summary>
            Serialize Enum
            </summary>
        </member>
        <member name="M:Diphap.JsNetBridge.SerializeEnum.ExecuteAdvanced(System.Type)">
            <summary>
            Serialize Enum.
            </summary>
            <param name="tenum"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.SerializeEnum.ExecuteSimple(System.Type)">
            <summary>
            Serialize Enum.
            </summary>
            <param name="tenum"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.SerializeEnum.ToDictionnary(System.Type)">
            <summary>
            To Dictionnary
            </summary>
            <param name="tenum"></param>
            <returns></returns>
        </member>
        <member name="T:Diphap.JsNetBridge.SerializeType">
            <summary>
            Serialize type.
            </summary>
        </member>
        <member name="F:Diphap.JsNetBridge.SerializeType.SimpleTypes">
            <summary>
            Types who containe only primitive type.
            </summary>
        </member>
        <member name="M:Diphap.JsNetBridge.SerializeType.Execute(System.Type,System.Boolean,System.String)">
            <summary>
            Serialalize type.
            </summary>
            <param name="tobj"></param>
            <param name="exclude"></param>
            <param name="noReturn"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.SerializeType.Execute(System.Type,System.Int32,System.Boolean,System.String)">
            <summary>
            Serialalize type.
            </summary>
            <param name="tobj">type of object</param>
            <param name="_idx_max"></param>
            <param name="noReturn"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.SerializeType.Execute_old(System.Type,System.Int32,System.Boolean,Diphap.JsNetBridge.SerializeType.PrevisousRecursiveContext,System.String)">
            <summary>
            Serialalize type.
            </summary>
            <param name="tobj">type of object</param>
            <param name="_idx_max"></param>
            
            <param name="noReturn"></param>
            <param name="context_old"></param>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="T:Diphap.JsNetBridge.SerializeType.PrevisousRecursiveContext">
            <summary>
            Previous Context.
            </summary>
        </member>
        <member name="M:Diphap.JsNetBridge.SerializeType.PrevisousRecursiveContext.IsSimilarWithTObj(System.Type)">
            <summary>
            type of member is it similar with this.Tobj.
            </summary>
            <param name="tmem"></param>
            <returns></returns>
        </member>
        <member name="T:Diphap.JsNetBridge.Common.JS.JSArrayFactory">
            <summary>
            My array factory extends a js array.
            New instances of Array have a function '$dpItemFactory' who creates instance of item of Array.
            </summary>
        </member>
        <member name="F:Diphap.JsNetBridge.Common.JS.JSArrayFactory.FunctionName">
            <summary>
            Name of factory.
            </summary>
        </member>
        <member name="M:Diphap.JsNetBridge.Common.JS.JSArrayFactory.Implementation">
            <summary>
            [it's not necessary] Gives js code of factory extends instance of Array with  added function '$dpItemFactory' who creates instance of item of array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.Common.JS.JSArrayFactory.FunctionDefinitionCall(System.String)">
            <summary>
            JS code of call of my factory who extends instances of array.
            </summary>
            <param name="var"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.Data.ModelInfo.ToJSCore(System.Boolean)">
            <summary>
            Code JS of factories of c# classes.
            There is not 'JSArrayFactory'
            </summary>
            <param name="withDependencies">append js dependencies.</param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.Data.ModelInfo.ToJS">
            <summary>
            All code js.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.Config.VS_JsEnumKeyValue_instruction(System.String)">
            <summary>
            JS ENUM Intellisense.
            </summary>
        </member>
        <member name="P:Diphap.JsNetBridge.Config.VS_JsEnumKeyValue">
            <summary>
            JS ENUM Intellisense.
            </summary>
        </member>
        <member name="T:Diphap.JsNetBridge.TypeHelper">
            <summary>
            Helper.
            </summary>
        </member>
        <member name="M:Diphap.JsNetBridge.TypeHelper.GetElementTypeOfCollection(System.Type,System.Type@)">
            <summary>
            Get element type of collection if tmem is collection other else return null.
            </summary>
            <param name="tmember"></param>
            <param name="tElement"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.TypeHelper.GetElementTypeOfCollectionOrDefault(System.Type)">
            <summary>
            Get element type of collection if 't' is collection other else return 't'.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.TypeHelper.IsCollection(System.Type)">
            <summary>
            Is it collection.
            </summary>
            <param name="tmember"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.TypeHelper.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Get type of member.
            </summary>
            <param name="mi"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.TypeHelper.IsNumber(System.Type)">
            <summary>
            Is it number?
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.TypeHelper.IsDateTime(System.Type)">
            <summary>
            Is it DateTime?
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.TypeHelper.IsBoolean(System.Type)">
            <summary>
            Is it boolean?
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.TypeHelper.IsEnum(System.Type)">
            <summary>
            Is it Enum?
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.TypeHelper.GetTypesOfClass(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Get Types
            </summary>
            <param name="fileName"></param>
            <param name="namespaces"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.TypeHelper.GetTypesOfClass(System.Reflection.Assembly,System.Collections.Generic.IList{System.String})">
            <summary>
            Get Types of class.
            </summary>
            <param name="ass"></param>
            <param name="namespaces"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.TypeHelper.GetTypesOfClass(System.Type[],System.Collections.Generic.IList{System.String})">
            <summary>
            filter types of class.
            </summary>
            <param name="types"></param>
            <param name="namespaces"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.TypeHelper.GetTypesOfEnum(System.Reflection.Assembly,System.Collections.Generic.IList{System.String})">
            <summary>
            Get types of enum.
            </summary>
            <param name="ass"></param>
            <param name="namespaces"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.TypeHelper.GetTypesOfEnum(System.Type[],System.Collections.Generic.IList{System.String})">
            <summary>
            Get types of enum.
            </summary>
            <param name="types"></param>
            <param name="namespaces"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.TypeHelper.GetTypesOfEnum(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Get Types of enum.
            </summary>
            <param name="fileName"></param>
            <param name="namespaces"></param>
            <returns></returns>
        </member>
        <member name="T:Diphap.JsNetBridge.SerializeNet">
            <summary>
            Converter to JS.
            </summary>
        </member>
        <member name="M:Diphap.JsNetBridge.SerializeNet.TrySerializeObject(System.Type)">
            <summary>
            Serialize object with constructor less parameters.
            </summary>
            <param name="tobj"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.SerializeNet.TrySerializeType(System.Type,System.Boolean,System.String)">
            <summary>
            Serialize type.
            </summary>
            <param name="tobj"></param>
            
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.SerializeNet.TrySerialize(Diphap.JsNetBridge.SerializeNet.EnumTrySerialize,System.Type)">
            <summary>
            Serialize type or object.
            </summary>
            <param name="enumTrySerialize"></param>
            <param name="tobj"></param>
            <param name="isCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Diphap.JsNetBridge.SerializeNet.TrySerialize(System.Type)">
            <summary>
            Serialize type or object(it depends on 'SerializeNet.EnumTrySerializeValue').
            </summary>
            <param name="tobj"></param>
            <param name="isCollection"></param>
            <returns></returns>
        </member>
        <member name="T:Diphap.JsNetBridge.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Diphap.JsNetBridge.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Diphap.JsNetBridge.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Diphap.JsNetBridge.Properties.Resources.arrayFactory">
             <summary>
               Looks up a localized string similar to (function () {
            
                window.$dp = window.$dp || {}; window.$dp.shared = window.$dp.shared || {};
            
                if (window.$dp.shared.arrayFactory !== undefined) { return; }
            
                $dp.shared.arrayFactory = function arrayFactory(ref) {
                    /// &lt;signature&gt;
                    ///   &lt;summary&gt;this function returns a array with added function &apos;$dpItemFactory&apos; who creates instance of item of array.&lt;/summary&gt;
                    ///   &lt;param name=&quot;ref&quot; type=&quot;Function&quot;&gt;ref is factory who creates instance of item of array&lt;/param&gt;
                    [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Diphap.JsNetBridge.Properties.Resources.circularReferenceManagerFactory">
             <summary>
               Looks up a localized string similar to (function () {
                window.$dp = window.$dp || {};
                window.$dp.shared = window.$dp.shared || {};
            
                if (window.$dp.shared.circularReferenceManagerFactory !== undefined) { return; }
            
                window.$dp.shared.circularReferenceManagerFactory = function circularReferenceManagerFactory(sameIntance) {
                    /// &lt;signature&gt;
                    ///   &lt;summary&gt;Factory gives un new instance of Function that handles the circular reference objects.&lt;/summary&gt;
                    ///   &lt;param name=&quot;sameIntance&quot; type=&quot;bool&quot;&gt;If sameIn [rest of string was truncated]&quot;;.
             </summary>
        </member>
    </members>
</doc>
